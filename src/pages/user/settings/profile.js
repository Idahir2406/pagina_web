import Head from "next/head";
import { useState } from "react";
import ProfileLayout from "components/profileLayout";
import { RxPencil2 } from "react-icons/rx";
import { AiOutlineInfo } from "react-icons/ai";
import { Image, Button, Input } from "@nextui-org/react";
import { BsCameraFill } from "react-icons/bs";
import { useUser } from "hooks/useUser";
import { Tooltip } from "../../../components/buttons/Tooltip";
import { InputFile } from "components/littleComponents/InputFile";
import NextImage from "next/image";
export default function Profile() {
  const [change, setChange] = useState(false);
  const [userInfo, setUserInfo] = useState({
    username: "",
    phoneNumber: "",
    adresses: [],
  });
  const { user, loading, getUser } = useUser();

  const handleInputChange = (e) => {
    setUserInfo({
      ...userInfo,
      [e.target.name]: e.target.value,
    });
  };
  const handlePhoneNumberChange = (value) => {
    setUserInfo({
      ...userInfo,
      phoneNumber: value,
    });
  };

  const handleSendInfo = async () => {
    const filteredUserInfo = {};

    for (const key in userInfo) {
      if (userInfo[key] !== "") {
        filteredUserInfo[key] = userInfo[key];
      }
    }
    // Elimina la propiedad "adresses" si está vacía o su longitud es 0
    if (filteredUserInfo.adresses && filteredUserInfo.adresses.length === 0) {
      delete filteredUserInfo.adresses;
    }
    const res = await fetch(`/api/user/${user.email}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(filteredUserInfo),
    });
    const data = await res.json();
  };

  const handleFileSelected = async (event) => {
    const file = event.target.files[0];
    const formData = new FormData();
    formData.append("image", file);
    try {
      // const url = await uploadProfilePic(file);
      const res = await fetch(`/api/profileHandler`, {
        method: "POST",

        body: formData,
      });
      const data = await res.json();
      console.log(data);
      getUser();
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="bg-white dark:bg-slate-800 p-4 grid grid-cols-1 justify-items-center md:justify-items-stretch md:grid-cols-12 rounded-md gap-4  max-w-7xl mx-auto ">
        <article className="flex w-full md:w-auto col-span-6">
          <picture className="mx-auto md:mx-0 flex items-center justify-center">
            {user.image ? (
              <InputFile
                name="image"
                onChange={handleFileSelected}
                accept=".jpg, .jpeg, .png"
                className="cursor-pointer"
              >
                {/*  */}
                <Image
                  as={NextImage}
                  width={275}
                  height={750}
                  priority
                  className="md:max-h-64 object-cover"
                  alt="product"
                  src={user.image}
                />
              </InputFile>
            ) : (
              <InputFile
                name="image"
                onChange={handleFileSelected}
                accept=".jpg, .jpeg, .png"
                className={`w-64 h-64  rounded-2xl cursor-pointer flex items-center justify-center relative  transition-colors text-gray-400 dark:bg-slate-700`}
              >
                {" "}
                <BsCameraFill size={90} />
              </InputFile>
            )}
          </picture>
        </article>
        <article className="flex w-full md:w-auto flex-col dark:bg-slate-700 bg-gray-100 rounded-md p-5 gap-1 col-span-6">
          <div className={`flex flex-col w-full`}>
            {change ? (
              <div className="flex flex-col w-full gap-4">
                <div className="flex items-center justify-between gap-4">
                  <Input
                    label="Nombre de usuario"
                    type="text"
                    name="username"
                    classNames={{
                      inputWrapper: [
                        "bg-white",
                        "dark:bg-gray-800",
                        "dark:hover:bg-gray-700",
                      ],
                    }}
                    onChange={handleInputChange}
                  />
                  <Button
                    isIconOnly
                    color="secondary"
                    onPress={() => setChange(!change)}
                    variant="bordered"
                  >
                    <RxPencil2 size={20} />
                  </Button>
                </div>
                <div className="flex items-center justify-between gap-4">
                  <Input
                    disabled
                    type="email"
                    label="Email"
                    value={user.email}
                    classNames={{
                      inputWrapper: ["bg-white", "dark:bg-gray-800"],
                    }}
                  />
                  <Tooltip
                    content="No se puede modificar el email"
                    placement="right"
                  >
                    <AiOutlineInfo size={20} />
                  </Tooltip>
                </div>
                <Input
                  classNames={{
                    inputWrapper: [
                      "bg-white",
                      "dark:bg-gray-800",
                      "dark:hover:bg-gray-700",
                    ],
                  }}
                  type="text"
                  label="Numero de teléfono"
                />
              </div>
            ) : (
              <>
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-medium">{user.username}</h2>
                  <Button
                    isIconOnly
                    color="secondary"
                    onPress={() => setChange(!change)}
                    variant="bordered"
                  >
                    <RxPencil2 size={20} />
                  </Button>
                </div>
                <div className="flex mt-4 items-center justify-between">
                  <p className="text-default-500 dark:text-gray-300">
                    {user.email}
                  </p>
                </div>
                <label className="text-gray-400 mt-1">Teléfono:</label>

                <p className="text-default-500 dark:text-gray-300">
                  {user.phoneNumber}
                </p>
              </>
            )}
          </div>
          <div className="flex gap-4 items-center  text-gray-500">
            {/* <div className="group relative">
                  <AiOutlineInfo
                    className="border rounded-full border-gray-500 cursor-pointer hover:bg-gray-300 transition duration-300 ease-in-out "
                    size={15}
                  />
                  <span className="hidden group-hover:block bg-violet-500 text-white text-sm px-2 py-1 absolute top-20 right-0 -translate-y-full transform translate-x-full rounded-md shadow-md z-10">
                    No puedes cambiar el correo electrónico
                  </span>
                </div> */}
          </div>

          <button className="text-default-500 dark:text-gray-300  text-start hover:underline my-2">
            Cambiar contraseña
          </button>
          <Button
            variant="shadow"
            className="bg-violet-500 text-white"
            onClick={handleSendInfo}
          >
            Guardar cambios
          </Button>
        </article>
      </section>
    </>
  );
}

Profile.getLayout = function getLayout(page) {
  return <ProfileLayout>{page}</ProfileLayout>;
};
