import Head from "next/head";
import { useState, useRef, useContext } from "react";
import ProfileLayout from "components/profileLayout";
import { RxPencil2 } from "react-icons/rx";
import { AiOutlineInfo, AiOutlinePlus } from "react-icons/ai";
import { Image,Button, Input } from "@nextui-org/react";
import { BsCameraFill } from "react-icons/bs";
import { PhoneInput } from "../../../../../components/form";
import UserContext from "../../../../../context/user/userContext";
import { Tooltip } from "../../../../../components/buttons/tooltip";
import { InputFile } from "../../../../../components/littleComponents/InputFile";
export default function Profile() {
  const [change, setChange] = useState(false);
  const [hover, setHover] = useState(false);
  const [userInfo, setUserInfo] = useState({
    username: "",
    phoneNumber: "",
    adresses: [],
  });
  const { user, loading, getUser } = useContext(UserContext);

  const handleInputChange = (e) => {
    setUserInfo({
      ...userInfo,
      [e.target.name]: e.target.value,
    });
  };
  const handlePhoneNumberChange = (value) => {
    setUserInfo({
      ...userInfo,
      phoneNumber: value,
    });
  };

  const handleSendInfo = async () => {
    const filteredUserInfo = {};

    for (const key in userInfo) {
      if (userInfo[key] !== "") {
        filteredUserInfo[key] = userInfo[key];
      }
    }
    // Elimina la propiedad "adresses" si está vacía o su longitud es 0
    if (filteredUserInfo.adresses && filteredUserInfo.adresses.length === 0) {
      delete filteredUserInfo.adresses;
    }
    const res = await fetch(`http://localhost:3000/api/user/${user.email}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(filteredUserInfo),
    });
    const data = await res.json();
  };
  const fileInputRef = useRef(null);

  const handleOpenFileMenu = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  
  const handleFileSelected = async (event) => {
    const file = event.target.files[0];
    const formData = new FormData();
    formData.append("image", file);
    try {
      // const url = await uploadProfilePic(file);
      const res = await fetch(`http://localhost:3000/api/profileHandler`, {
        method: "POST",

        body: formData,
      });
      const data = await res.json();
      console.log(data);
      getUser();
    } catch (error) {
      console.error(error);
    }
  };

  const handleDownload = async () => {
    try {
      const filename = "prueba.jpg"; // Reemplaza con el nombre de tu archivo
      const response = await fetch(`/api/profileHandler?filename=${filename}`);

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = filename;
        a.click();
        window.URL.revokeObjectURL(url);
      } else {
        console.error("Error al descargar el archivo");
      }
    } catch (error) {
      console.error("Error al descargar el archivo:", error);
    }
  };

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="bg-white dark:bg-slate-800 p-4 grid grid-cols-1 justify-items-center md:justify-items-stretch md:grid-cols-2 rounded-md gap-4  ">
        <article className="flex w-full md:w-auto relative max-w-md ">
          <picture className="relative mx-auto md:mx-0 flex items-center justify-center">
            {/* <Image
              isBlurred
              loading="lazy"
              src={user.image}
              alt="profile Image"
              width={250}
              isZoomed
              className="cursor-pointer"
              onMouseEnter={() => setHover(true)}
              onClick={handleOpenFileMenu}
            /> */}
            {user.image ? (
          <InputFile
            name="image"
            onChange={handleFileSelected}
            accept=".jpg, .jpeg, .png"
            className="cursor-pointer"
          >
            <Image
              className="max-h-44"
              alt="product"
              src={user.image}
            />
          </InputFile>
        ) : (
          <div className="flex flex-col items-center">
            <InputFile
              name="image"
              onChange={handleFileSelected}
              accept=".jpg, .jpeg, .png"
              className={`h-36 w-36  rounded-md cursor-pointer flex items-center justify-center relative  transition-colors text-gray-400 `}
            >
              {" "}
              <BsCameraFill size={90} />
            </InputFile>
  
          </div>
        )}
            <input
              type="file"
              accept="image/*"
              ref={fileInputRef}
              style={{ display: "none" }}
              onChange={handleFileSelected}
            />
          </picture>
        </article>
        <article className="flex w-full md:w-auto flex-col dark:bg-slate-700 bg-gray-100 rounded-md p-5 md:max-w-md gap-1 ">
          <div className={`flex justify-between ${!change && "w-52"}`}>
            {change ? (
              <Input
                label="Nombre de usuario"
                type="text"
                name="username"
                onChange={handleInputChange}
              />
            ) : (
              <h1 className="text-2xl font-semibold">{user.username}</h1>
            )}
            <button
              onClick={() => setChange(!change)}
              className="text-gray-500 hover:text-gray-700 "
            >
              <RxPencil2 size={20} />
            </button>
          </div>
          <div className="flex gap-4 items-center  text-gray-500">
            {change ? (
              <Input
                disabled
                type="email"
                label="Email"
                defaultValue="junior@nextui.org"
                className="max-w-xs"
              />
            ) : (
              <p>{user.email}</p>
            )}
            <Tooltip
              showArrow
              classNames={{
                base: "py-2 px-4  text-black ",
                arrow: "bg-white dark:bg-white",
              }}
              content="No se puede modificar el email"
              placement="right"
            >
              <AiOutlineInfo size={20} />
            </Tooltip>
            {/* <div className="group relative">
                  <AiOutlineInfo
                    className="border rounded-full border-gray-500 cursor-pointer hover:bg-gray-300 transition duration-300 ease-in-out "
                    size={15}
                  />
                  <span className="hidden group-hover:block bg-violet-500 text-white text-sm px-2 py-1 absolute top-20 right-0 -translate-y-full transform translate-x-full rounded-md shadow-md z-10">
                    No puedes cambiar el correo electrónico
                  </span>
                </div> */}
          </div>
          <label className="text-gray-400 mt-1">Teléfono:</label>
          {change ? (
            <PhoneInput />
          ) : (
            <p className="text-gray-500">{user.phoneNumber}</p>
          )}

          <button className="text-gray-500 hover:text-gray-700 text-start hover:underline my-2">
            Cambiar contraseña
          </button>
          <Button
            variant="shadow"
            className="bg-violet-500 text-white"
            onClick={handleSendInfo}
          >
            Guardar cambios
          </Button>
        </article>
        
      </section>
    </>
  );
}

Profile.getLayout = function getLayout(page) {
  return <ProfileLayout>{page}</ProfileLayout>;
};
