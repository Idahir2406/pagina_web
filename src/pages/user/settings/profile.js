import Head from "next/head";
import React, { useState, useRef, useEffect } from "react";
import ProfileLayout from "components/profileLayout";
import { getServerSession } from "next-auth";
import { authOptions } from "pages/api/auth/[...nextauth]";
import Avatar from "components/littleComponents/avatar";
import { RxPencil2 } from "react-icons/rx";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/style.css";
import { AiOutlineInfo, AiOutlineCamera, AiOutlinePlus } from "react-icons/ai";
import io from "socket.io-client";
import { Button } from "../../../components/littleComponents/button";
import { TableRow } from "../../../components/littleComponents/tableRow";
import { EditInput } from "../../../components/littleComponents/editInput";

const socket = io("http://localhost:3001", {
  transports: ["websocket", "polling", "flashsocket"],
  cors: {
    origin: "http://localhost:3000",
  },
});

export default function Profile({ userData }) {
  const [change, setChange] = useState(false);
  const [userInfo, setUserInfo] = useState({
    username: "",
    phoneNumber: "",
    adresses: [],
  });
  const [user, setUser] = useState(userData);
  const handleInputChange = (e) => {
    setUserInfo({
      ...userInfo,
      [e.target.name]: e.target.value,
    });
  };
  const handlePhoneNumberChange = (value) => {
    setUserInfo({
      ...userInfo,
      phoneNumber: value,
    });
  };

  const handleSendInfo = async () => {
    const filteredUserInfo = {};

    for (const key in userInfo) {
      if (userInfo[key] !== "") {
        filteredUserInfo[key] = userInfo[key];
      }
    }
    // Elimina la propiedad "adresses" si está vacía o su longitud es 0
    if (filteredUserInfo.adresses && filteredUserInfo.adresses.length === 0) {
      delete filteredUserInfo.adresses;
    }
    const res = await fetch(
      `http://localhost:3000/api/user/${userData.email}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(filteredUserInfo),
      }
    );
    const data = await res.json();
    setUser(data);
    setChange(false);
  };
  const fileInputRef = useRef(null);

  const handleOpenFileMenu = (event) => {
    event.preventDefault();
    fileInputRef.current.click();
  };

  const handleFileSelected = (event) => {
    const file = event.target.files[0];
    if (file) {
      const formData = new FormData();
      formData.append("image", file);
      handleSendImage(formData);
    }
  };
  const handleSendImage = async (formData) => {
    const res = await fetch(
      `http://localhost:3000/api/user/${userData.email}/profileImage`,
      {
        method: "PUT",
        body: formData,
      }
    );

    const data = await res.json();
    setUser(data);
    console.log(data);
    formData.delete("image");
    socket.emit("updateProfile", data);
    setUser(data);
  };

  return (
    <div className="">
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col w-[100vh] justify-center md:flex-row gap-6 md:justify-start items-center md:w-full">
        <div className="flex flex-col gap-4 w-full ">
          <div className="flex items-center gap-20">
            <div className="flex flex-col bg-gray-100 rounded-md p-5 max-w-sm gap-1">
              <div className={`flex justify-between ${!change && "w-52"}`}>
                {change ? (
                  <EditInput
                    name="username"
                    onChange={handleInputChange}
                    placeholder={user.username}
                  />
                ) : (
                  <h1 className="text-2xl font-semibold">{user.username}</h1>
                )}
                <button
                  onClick={() => setChange(!change)}
                  className="text-gray-500 hover:text-gray-700 "
                >
                  <RxPencil2 size={20} />
                </button>
              </div>
              <div className="flex gap-6 items-center  text-gray-500">
                <p>{user.email}</p>
                <div className="group relative">
                  <AiOutlineInfo
                    className="border rounded-full border-gray-500 cursor-pointer hover:bg-gray-300 transition duration-300 ease-in-out "
                    size={15}
                  />
                  <span className="hidden group-hover:block bg-violet-500 text-white text-sm px-2 py-1 absolute top-20 right-0 -translate-y-full transform translate-x-full rounded-md shadow-md z-10">
                    No puedes cambiar el correo electrónico
                  </span>
                </div>
              </div>
              <label className="text-gray-400 mt-1">Teléfono:</label>
              {change ? (
                <PhoneInput
                  name="phoneNumber"
                  inputStyle={{
                    width: "100%",
                    border: "2px solid #d1d5db",
                  }}
                  buttonStyle={{
                    border: "2px solid #d1d5db",
                    borderRight: "none",
                    backgroundColor: "#fff",
                  }}
                  country={"us"}
                  placeholder={user.phoneNumber}
                  onChange={handlePhoneNumberChange}
                />
              ) : (
                <p className="text-gray-500">{user.phoneNumber}</p>
              )}

              <button className="text-gray-500 hover:text-gray-700 text-start hover:underline my-2">
                Cambiar contraseña
              </button>
              <Button onClick={handleSendInfo}>Guardar cambios</Button>
            </div>
            <div className="flex items-end">
              {user.image ? (
                <Avatar src={user.image} size="2xl" />
              ) : (
                <Avatar noSrc size="2xl" />
              )}
              <div className="flex items-center justify-center relative ring ring-white top-1 right-7 p-1 rounded-full bg-violet-300 hover:bg-violet-400">
                <AiOutlineCamera
                  className="cursor-pointer text-gray-900"
                  size={25}
                  onClick={handleOpenFileMenu}
                />
                <input
                  type="file"
                  accept="image/*"
                  ref={fileInputRef}
                  style={{ display: "none" }}
                  onChange={handleFileSelected}
                />
              </div>
            </div>
          </div>
          <div className="flex flex-col w-fullflex-col bg-gray-100 rounded-md p-5 gap-1">
            <div>
              <h1 className="text-xl px-6 font-md">Direcciones</h1>
            </div>
            <table className="table-auto w-full">
              <thead>
                <tr className="border-y">
                  <th className="text-start font-medium py-4 px-6">Calle</th>
                  <th className="text-start font-medium py-4 px-6">Estado</th>
                  <th className="text-start font-medium py-4 px-6">Ciudad</th>
                  <th className="text-start font-medium py-4 px-6">Código</th>
                </tr>
              </thead>
              <tbody>
                {user.adresses.map((adress, index) => (
                  <tr key={index}>
                    <TableRow>{adress.street}</TableRow>
                    <TableRow>{adress.state}</TableRow>
                    <TableRow>{adress.city}</TableRow>
                    <TableRow>{adress.postalCode}</TableRow>
                  </tr>
                ))}
              </tbody>
            </table>
            <Button>
              <AiOutlinePlus size={20} className="m-auto" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

Profile.getLayout = function getLayout(page) {
  return <ProfileLayout>{page}</ProfileLayout>;
};

export async function getServerSideProps(ctx) {
  const session = await getServerSession(ctx.req, ctx.res, authOptions);
  if (!session) {
    return {
      redirect: {
        destination: "/auth/login",
        permanent: false,
      },
    };
  }
  const res = await fetch(
    `http://localhost:3000/api/user/${session.user.email}`
  );
  const userData = await res.json();

  return {
    props: {
      userData,
    },
  };
}
